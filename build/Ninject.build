<?xml version="1.0" encoding="utf-8"?>
<project name="Ninject" default="all">
	<include buildfile="Ninject.include" />
	<property name="path.base" value="${project::get-base-directory()}\.."/>
	<property name="path.build" value="${path.base}/bin"/>
	<property name="path.lib" value="${path.base}/contrib"/>
	<property name="path.src" value="${path.base}/source"/>
	<property name="path.tools" value="${path.base}/contrib"/>
	
	<target name="all" depends="core"/>

	<property name="product.name" value="Ninject.Extensions.Interception"/>
	<property name="product.company" value="Innovatian Software, LLC"/>
	<property name="product.duration" value="2007-2010"/>
	<property name="product.description" value="Interception extension for Ninject"/>
	<property name="product.keyfile" value="Ninject.snk"/>
	<property name="product.docfile" value="${product.name}.xml"/>
	<property name="product.assembly" value="${product.name}.dll"/>
	<property name="product.assembly.test" value="${product.name}.Tests.dll"/>
	
	<target name="core" depends="initialize">
		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines},${build.proxy.defines}"
         keyfile="${path.base}/build/${product.keyfile}" output="${current.path.build}/${product.assembly}" doc="${current.path.build}/${product.docfile}">
			<arg line="/filealign:512" unless="${build.platform == 'mono-2.0'}"/>
			<sources basedir="${path.src}">
				<include name="${build.asminfo}"/>
				<include name="${product.name}/**/*.cs"/>
			</sources>
			<references>
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Web.dll"/>
				<include name="${path.lib}\Ninject\${nant.settings.currentframework}\release\Ninject.dll"/>
				<include name="${path.lib}\LinFu.DynamicProxy\LinFu.DynamicProxy.dll" if="${(not(property::exists('build.proxy')) or build.proxy == 'linfu')}"/>
				<include name="${path.lib}\Castle-Windsor\bin\net-3.5\Castle.Core.dll" if="${(not(property::exists('build.proxy')) or build.proxy == 'cdp2') and build.platform == 'net-3.5'}"/>
				<include name="${path.lib}\Castle-Windsor\bin\net-3.5\Castle.DynamicProxy2.dll" if="${(not(property::exists('build.proxy')) or build.proxy == 'cdp2') and build.platform == 'net-3.5'}"/>
				<include name="${path.lib}\Castle-Windsor\bin\sl-3.0\Castle.Core.dll" if="${(not(property::exists('build.proxy')) or build.proxy == 'cdp2') and build.platform == 'silverlight-3.0'}"/>
				<include name="${path.lib}\Castle-Windsor\bin\sl-3.0\Castle.DynamicProxy2.dll" if="${(not(property::exists('build.proxy')) or build.proxy == 'cdp2') and build.platform == 'silverlight-3.0'}"/>
			</references>
		</csc>
	</target>

	<target name="compile-tests" depends="core" if="${build.platform == 'net-3.5'}" unless="${skip.tests}">
		<mkdir dir="${current.path.test}"/>
		<copy todir="${current.path.test}" flatten="true">
			<fileset basedir="${current.path.build}">
				<include name="**/*.dll"/>
			</fileset>
		</copy>
		<copy todir="${current.path.test}">
			<fileset basedir="${path.tools.xunit}">
				<include name="xunit.dll"/>
				<include name="xunit.should.dll"/>
			</fileset>
		</copy>
		<copy todir="${current.path.test}">
			<fileset basedir="${path.tools.moq}">
				<include name="Moq.dll"/>
			</fileset>
		</copy>
		<copy todir="${current.path.test}/TestModules">
			<fileset basedir="${path.src}/Ninject.Tests/TestModules">
				<include name="Ninject.Tests.TestModule.dll"/>
			</fileset>
		</copy>
		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines},${build.proxy.defines}"
         output="${current.path.test}/Ninject.Tests.dll">
			<sources basedir="${path.src}">
				<include name="Ninject.Tests/**/*.cs"/>
			</sources>
			<references basedir="${current.path.test}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Web.dll"/>
				<include name="Moq.dll"/>
				<include name="xunit.dll"/>
				<include name="xunit.should.dll"/>
				<include name="Ninject.dll"/>
			</references>
			<nowarn>
				<warning number="1584"/>
			</nowarn>
		</csc>
	</target>

	<target name="config-platform-linfu">
		<property name="build.proxy.defines" value="NO_CDP2"/>
	</target>

	<target name="config-platform-cdp2">
		<property name="build.proxy.defines" value="NO_LINFU"/>
	</target>

	<target name="initialize" depends="create-assembly-info">
		<mkdir dir="${path.build}" if="${not(directory::exists(path.build))}"/>
		<mkdir dir="${path.dist}" if="${not(directory::exists(path.dist))}"/>

		<call target="config-build-${build.config}"/>
		<call target="config-platform-${build.platform}"/>
		<if test="${property::exists('build.proxy')}">
			<call target="config-platform-${build.proxy}"/>
			<property name="build.outputfile" value="${path.dist}\${product.name}-${build.version}-${build.config}-${build.platform}-${build.proxy}.zip"/>
		</if>
		<if test="${not(property::exists('build.proxy.defines'))}">
			<property name="build.proxy.defines" value=""/>
			<property name="build.outputfile" value="${path.dist}\${product.name}-${build.version}-${build.config}-${build.platform}.zip"/>
		</if>
		
		<property name="current.path.build" value="${path.build}/${build.platform}/${build.config}"/>
		<property name="current.path.build.lib" value="${path.build}/${build.platform}/${build.config}/lib"/>
		<property name="current.path.build.extensions" value="${path.build}/${build.platform}/${build.config}/extensions"/>
		<property name="current.path.test" value="${path.build}/${build.platform}/tests" />

		<mkdir dir="${current.path.build}" if="${not(directory::exists(current.path.build))}"/>
		<mkdir dir="${current.path.build.lib}" if="${not(directory::exists(current.path.build.lib))}"/>
		<mkdir dir="${current.path.build.extensions}" if="${not(directory::exists(current.path.build.extensions))}"/>

		<copy todir="${current.path.build.lib}">
			<fileset basedir="${path.lib}\Ninject\${nant.settings.currentframework}\release">
				<include name="Ninject.dll"/>
				<include name="Ninject.xml"/>
			</fileset>
		</copy>
		<if test="${not(property::exists('build.proxy')) or build.proxy == 'linfu'}">
			<copy todir="${current.path.build.lib}">
				<fileset basedir="${path.lib}\LinFu.DynamicProxy">
					<include name="LinFu.DynamicProxy.dll" unless="${build.platform == 'silverlight-3.0'}"/>
					<include name="LinFu.License.txt" unless="${build.platform == 'silverlight-3.0'}"/>
				</fileset>
			</copy>
		</if>
		<if test="${(not(property::exists('build.proxy')) or build.proxy == 'cdp2')}">
			<copy todir="${current.path.build.lib}">
				<fileset basedir="${path.lib}\Castle-Windsor\bin\net-3.5">
					<include name="Castle.Core.*" if="${build.platform == 'net-3.5'}"/>
					<include name="Castle.DynamicProxy2.*" if="${build.platform == 'net-3.5'}"/>
				</fileset>
			</copy>
			<copy todir="${current.path.build.lib}">
				<fileset basedir="${path.lib}\Castle-Windsor\bin\sl-3.0">
					<include name="Castle.Core.*" if="${build.platform == 'silverlight-3.0'}"/>
					<include name="Castle.DynamicProxy2.*" if="${build.platform == 'silverlight-3.0'}"/>
				</fileset>
			</copy>
			<copy todir="${current.path.build.lib}">
				<fileset basedir="${path.lib}\Castle-Windsor">
					<include name="ASL - Apache Software Foundation License.txt"/>
				</fileset>
			</copy>
		</if>
		<copy todir="${current.path.build}">
			<fileset basedir="${path.base}">
				<include name="LICENSE.txt"/>
			</fileset>
		</copy>
	</target>

</project>